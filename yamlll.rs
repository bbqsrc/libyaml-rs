/* automatically generated by rust-bindgen */

#![allow(non_camel_case_types)]
#![allow(dead_code)]

use libc::*;
pub type yaml_char_t = c_uchar;
pub struct yaml_version_directive_s {
    pub major: c_int,
    pub minor: c_int,
}
pub type yaml_version_directive_t = yaml_version_directive_s;
pub struct yaml_tag_directive_s {
    pub handle: *mut yaml_char_t,
    pub prefix: *mut yaml_char_t,
}
pub type yaml_tag_directive_t = yaml_tag_directive_s;

pub type yaml_encoding_e = c_uint;
pub static YAML_ANY_ENCODING: c_uint = 0;
pub static YAML_UTF8_ENCODING: c_uint = 1;
pub static YAML_UTF16LE_ENCODING: c_uint = 2;
pub static YAML_UTF16BE_ENCODING: c_uint = 3;
pub type yaml_encoding_t = yaml_encoding_e;

pub type yaml_break_e = c_uint;
pub static YAML_ANY_BREAK: c_uint = 0;
pub static YAML_CR_BREAK: c_uint = 1;
pub static YAML_LN_BREAK: c_uint = 2;
pub static YAML_CRLN_BREAK: c_uint = 3;
pub type yaml_break_t = yaml_break_e;

pub type yaml_error_type_e = c_uint;
pub static YAML_NO_ERROR: c_uint = 0;
pub static YAML_MEMORY_ERROR: c_uint = 1;
pub static YAML_READER_ERROR: c_uint = 2;
pub static YAML_SCANNER_ERROR: c_uint = 3;
pub static YAML_PARSER_ERROR: c_uint = 4;
pub static YAML_COMPOSER_ERROR: c_uint = 5;
pub static YAML_WRITER_ERROR: c_uint = 6;
pub static YAML_EMITTER_ERROR: c_uint = 7;
pub type yaml_error_type_t = yaml_error_type_e;
pub struct yaml_mark_s {
    pub index: size_t,
    pub line: size_t,
    pub column: size_t,
}
pub type yaml_mark_t = yaml_mark_s;

/*
pub type yaml_scalar_style_e = c_uint;
pub static YAML_ANY_SCALAR_STYLE: c_uint = 0;
pub static YAML_PLAIN_SCALAR_STYLE: c_uint = 1;
pub static YAML_SINGLE_QUOTED_SCALAR_STYLE: c_uint = 2;
pub static YAML_DOUBLE_QUOTED_SCALAR_STYLE: c_uint = 3;
pub static YAML_LITERAL_SCALAR_STYLE: c_uint = 4;
pub static YAML_FOLDED_SCALAR_STYLE: c_uint = 5;
*/

pub enum yaml_scalar_style_e {
    YAML_ANY_SCALAR_STYLE,
    YAML_PLAIN_SCALAR_STYLE,
    YAML_SINGLE_QUOTED_SCALAR_STYLE,
    YAML_DOUBLE_QUOTED_SCALAR_STYLE,
    YAML_LITERAL_SCALAR_STYLE,
    YAML_FOLDED_SCALAR_STYLE
}
pub type yaml_scalar_style_t = yaml_scalar_style_e;

pub type yaml_sequence_style_e = c_uint;
pub static YAML_ANY_SEQUENCE_STYLE: c_uint = 0;
pub static YAML_BLOCK_SEQUENCE_STYLE: c_uint = 1;
pub static YAML_FLOW_SEQUENCE_STYLE: c_uint = 2;
pub type yaml_sequence_style_t = yaml_sequence_style_e;

pub type yaml_mapping_style_e = c_uint;
pub static YAML_ANY_MAPPING_STYLE: c_uint = 0;
pub static YAML_BLOCK_MAPPING_STYLE: c_uint = 1;
pub static YAML_FLOW_MAPPING_STYLE: c_uint = 2;
pub type yaml_mapping_style_t = yaml_mapping_style_e;

pub type yaml_token_type_e = c_uint;
pub static YAML_NO_TOKEN: c_uint = 0;
pub static YAML_STREAM_START_TOKEN: c_uint = 1;
pub static YAML_STREAM_END_TOKEN: c_uint = 2;
pub static YAML_VERSION_DIRECTIVE_TOKEN: c_uint = 3;
pub static YAML_TAG_DIRECTIVE_TOKEN: c_uint = 4;
pub static YAML_DOCUMENT_START_TOKEN: c_uint = 5;
pub static YAML_DOCUMENT_END_TOKEN: c_uint = 6;
pub static YAML_BLOCK_SEQUENCE_START_TOKEN: c_uint = 7;
pub static YAML_BLOCK_MAPPING_START_TOKEN: c_uint = 8;
pub static YAML_BLOCK_END_TOKEN: c_uint = 9;
pub static YAML_FLOW_SEQUENCE_START_TOKEN: c_uint = 10;
pub static YAML_FLOW_SEQUENCE_END_TOKEN: c_uint = 11;
pub static YAML_FLOW_MAPPING_START_TOKEN: c_uint = 12;
pub static YAML_FLOW_MAPPING_END_TOKEN: c_uint = 13;
pub static YAML_BLOCK_ENTRY_TOKEN: c_uint = 14;
pub static YAML_FLOW_ENTRY_TOKEN: c_uint = 15;
pub static YAML_KEY_TOKEN: c_uint = 16;
pub static YAML_VALUE_TOKEN: c_uint = 17;
pub static YAML_ALIAS_TOKEN: c_uint = 18;
pub static YAML_ANCHOR_TOKEN: c_uint = 19;
pub static YAML_TAG_TOKEN: c_uint = 20;
pub static YAML_SCALAR_TOKEN: c_uint = 21;
pub type yaml_token_type_t = yaml_token_type_e;
pub struct yaml_token_s {
    pub _type: yaml_token_type_t,
    pub data: yaml_token_data_u,
    pub start_mark: yaml_mark_t,
    pub end_mark: yaml_mark_t,
}
pub struct yaml_token_data_u {
    pub data: [u64, ..3u],
}
impl yaml_token_data_u {
    pub fn stream_start(&mut self) -> *mut yaml_token_data_stream_start_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn alias(&mut self) -> *mut yaml_token_data_alias_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn anchor(&mut self) -> *mut yaml_token_data_anchor_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn tag(&mut self) -> *mut yaml_token_data_tag_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn scalar(&mut self) -> *mut yaml_token_data_scalar_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn version_directive(&mut self) -> *mut yaml_token_data_version_directive_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn tag_directive(&mut self) -> *mut yaml_token_data_tag_directive_s {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct yaml_token_data_stream_start_s {
    pub encoding: yaml_encoding_t,
}
pub struct yaml_token_data_alias_s {
    pub value: *mut yaml_char_t,
}
pub struct yaml_token_data_anchor_s {
    pub value: *mut yaml_char_t,
}
pub struct yaml_token_data_tag_s {
    pub handle: *mut yaml_char_t,
    pub suffix: *mut yaml_char_t,
}
pub struct yaml_token_data_scalar_s {
    pub value: *mut yaml_char_t,
    pub length: size_t,
    pub style: yaml_scalar_style_t,
}
pub struct yaml_token_data_version_directive_s {
    pub major: c_int,
    pub minor: c_int,
}
pub struct yaml_token_data_tag_directive_s {
    pub handle: *mut yaml_char_t,
    pub prefix: *mut yaml_char_t,
}
pub type yaml_token_t = yaml_token_s;

pub type yaml_event_type_e = c_uint;
pub static YAML_NO_EVENT: c_uint = 0;
pub static YAML_STREAM_START_EVENT: c_uint = 1;
pub static YAML_STREAM_END_EVENT: c_uint = 2;
pub static YAML_DOCUMENT_START_EVENT: c_uint = 3;
pub static YAML_DOCUMENT_END_EVENT: c_uint = 4;
pub static YAML_ALIAS_EVENT: c_uint = 5;
pub static YAML_SCALAR_EVENT: c_uint = 6;
pub static YAML_SEQUENCE_START_EVENT: c_uint = 7;
pub static YAML_SEQUENCE_END_EVENT: c_uint = 8;
pub static YAML_MAPPING_START_EVENT: c_uint = 9;
pub static YAML_MAPPING_END_EVENT: c_uint = 10;
pub type yaml_event_type_t = yaml_event_type_e;
pub struct yaml_event_s {
    pub _type: yaml_event_type_t,
    pub data: yaml_event_data_u,
    pub start_mark: yaml_mark_t,
    pub end_mark: yaml_mark_t,
}
pub struct yaml_event_data_u {
    pub data: [u64, ..6u],
}
impl yaml_event_data_u {
    pub fn stream_start(&mut self) -> *mut yaml_event_data_stream_start_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn document_start(&mut self) -> *mut yaml_event_data_document_start_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn document_end(&mut self) -> *mut yaml_event_data_document_end_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn alias(&mut self) -> *mut yaml_event_data_alias_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn scalar(&mut self) -> *mut yaml_event_data_scalar_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn sequence_start(&mut self) -> *mut yaml_event_data_sequence_start_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn mapping_start(&mut self) -> *mut yaml_event_data_mapping_start_s {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct yaml_event_data_stream_start_s {
    pub encoding: yaml_encoding_t,
}
pub struct yaml_event_data_document_start_s {
    pub version_directive: *mut yaml_version_directive_t,
    pub tag_directives: yaml_event_data_document_start_tag_directives_s,
    pub implicit: c_int,
}
pub struct yaml_event_data_document_start_tag_directives_s {
    pub start: *mut yaml_tag_directive_t,
    pub end: *mut yaml_tag_directive_t,
}
pub struct yaml_event_data_document_end_s {
    pub implicit: c_int,
}
pub struct yaml_event_data_alias_s {
    pub anchor: *mut yaml_char_t,
}
pub struct yaml_event_data_scalar_s {
    pub anchor: *mut yaml_char_t,
    pub tag: *mut yaml_char_t,
    pub value: *mut yaml_char_t,
    pub length: size_t,
    pub plain_implicit: c_int,
    pub quoted_implicit: c_int,
    pub style: yaml_scalar_style_t,
}
pub struct yaml_event_data_sequence_start_s {
    pub anchor: *mut yaml_char_t,
    pub tag: *mut yaml_char_t,
    pub implicit: c_int,
    pub style: yaml_sequence_style_t,
}
pub struct yaml_event_data_mapping_start_s {
    pub anchor: *mut yaml_char_t,
    pub tag: *mut yaml_char_t,
    pub implicit: c_int,
    pub style: yaml_mapping_style_t,
}
pub type yaml_event_t = yaml_event_s;

/*
pub type yaml_node_type_e = c_uint;
pub static YAML_NO_NODE: c_uint = 0;
pub static YAML_SCALAR_NODE: c_uint = 1;
pub static YAML_SEQUENCE_NODE: c_uint = 2;
pub static YAML_MAPPING_NODE: c_uint = 3;
*/

pub enum yaml_node_type_e {
    YAML_NO_NODE,
    YAML_SCALAR_NODE,
    YAML_SEQUENCE_NODE,
    YAML_MAPPING_NODE
}

pub type yaml_node_type_t = yaml_node_type_e;
pub type yaml_node_t = yaml_node_s;
pub type yaml_node_item_t = c_int;
pub struct yaml_node_pair_s {
    pub key: c_int,
    pub value: c_int,
}
pub type yaml_node_pair_t = yaml_node_pair_s;
pub struct yaml_node_s {
    pub _type: yaml_node_type_t,
    pub tag: *mut yaml_char_t,
    pub data: yaml_node_data_u,
    pub start_mark: yaml_mark_t,
    pub end_mark: yaml_mark_t,
}
pub struct yaml_node_data_u {
    pub data: [u64, ..4u],
}
impl yaml_node_data_u {
    pub fn scalar(&mut self) -> *mut yaml_node_scalar_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn sequence(&mut self) -> *mut yaml_node_sequence_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn mapping(&mut self) -> *mut yaml_node_mapping_s {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct yaml_node_scalar_s {
    pub value: *mut yaml_char_t,
    pub length: size_t,
    pub style: yaml_scalar_style_t,
}
pub struct yaml_node_sequence_s {
    pub items: yaml_node_sequence_items_s,
    pub style: yaml_sequence_style_t,
}
pub struct yaml_node_sequence_items_s {
    pub start: *mut yaml_node_item_t,
    pub end: *mut yaml_node_item_t,
    pub top: *mut yaml_node_item_t,
}
pub struct yaml_node_mapping_s {
    pub pairs: yaml_node_mapping_pairs_s,
    pub style: yaml_mapping_style_t,
}
pub struct yaml_node_mapping_pairs_s {
    pub start: *mut yaml_node_pair_t,
    pub end: *mut yaml_node_pair_t,
    pub top: *mut yaml_node_pair_t,
}
pub struct yaml_document_s {
    pub nodes: yaml_document_nodes_s,
    pub version_directive: *mut yaml_version_directive_t,
    pub tag_directives: yaml_document_tag_directives_s,
    pub start_implicit: c_int,
    pub end_implicit: c_int,
    pub start_mark: yaml_mark_t,
    pub end_mark: yaml_mark_t,
}
pub struct yaml_document_nodes_s {
    pub start: *mut yaml_node_t,
    pub end: *mut yaml_node_t,
    pub top: *mut yaml_node_t,
}
pub struct yaml_document_tag_directives_s {
    pub start: *mut yaml_tag_directive_t,
    pub end: *mut yaml_tag_directive_t,
}
pub type yaml_document_t = yaml_document_s;
pub type yaml_read_handler_t = c_void;
pub struct yaml_simple_key_s {
    pub possible: c_int,
    pub required: c_int,
    pub token_number: size_t,
    pub mark: yaml_mark_t,
}
pub type yaml_simple_key_t = yaml_simple_key_s;

pub type yaml_parser_state_e = c_uint;
pub static YAML_PARSE_STREAM_START_STATE: c_uint = 0;
pub static YAML_PARSE_IMPLICIT_DOCUMENT_START_STATE: c_uint = 1;
pub static YAML_PARSE_DOCUMENT_START_STATE: c_uint = 2;
pub static YAML_PARSE_DOCUMENT_CONTENT_STATE: c_uint = 3;
pub static YAML_PARSE_DOCUMENT_END_STATE: c_uint = 4;
pub static YAML_PARSE_BLOCK_NODE_STATE: c_uint = 5;
pub static YAML_PARSE_BLOCK_NODE_OR_INDENTLESS_SEQUENCE_STATE: c_uint = 6;
pub static YAML_PARSE_FLOW_NODE_STATE: c_uint = 7;
pub static YAML_PARSE_BLOCK_SEQUENCE_FIRST_ENTRY_STATE: c_uint = 8;
pub static YAML_PARSE_BLOCK_SEQUENCE_ENTRY_STATE: c_uint = 9;
pub static YAML_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE: c_uint = 10;
pub static YAML_PARSE_BLOCK_MAPPING_FIRST_KEY_STATE: c_uint = 11;
pub static YAML_PARSE_BLOCK_MAPPING_KEY_STATE: c_uint = 12;
pub static YAML_PARSE_BLOCK_MAPPING_VALUE_STATE: c_uint = 13;
pub static YAML_PARSE_FLOW_SEQUENCE_FIRST_ENTRY_STATE: c_uint = 14;
pub static YAML_PARSE_FLOW_SEQUENCE_ENTRY_STATE: c_uint = 15;
pub static YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_KEY_STATE: c_uint = 16;
pub static YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE: c_uint = 17;
pub static YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE: c_uint = 18;
pub static YAML_PARSE_FLOW_MAPPING_FIRST_KEY_STATE: c_uint = 19;
pub static YAML_PARSE_FLOW_MAPPING_KEY_STATE: c_uint = 20;
pub static YAML_PARSE_FLOW_MAPPING_VALUE_STATE: c_uint = 21;
pub static YAML_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE: c_uint = 22;
pub static YAML_PARSE_END_STATE: c_uint = 23;
pub type yaml_parser_state_t = yaml_parser_state_e;
pub struct yaml_alias_data_s {
    pub anchor: *mut yaml_char_t,
    pub index: c_int,
    pub mark: yaml_mark_t,
}
pub type yaml_alias_data_t = yaml_alias_data_s;
pub struct yaml_parser_s {
    pub error: yaml_error_type_t,
    pub problem: *c_char,
    pub problem_offset: size_t,
    pub problem_value: c_int,
    pub problem_mark: yaml_mark_t,
    pub context: *c_char,
    pub context_mark: yaml_mark_t,
    pub read_handler: *mut ::std::option::Option<extern "C" fn
                                                     (arg1: *mut c_void,
                                                      arg2: *mut c_uchar,
                                                      arg3: size_t,
                                                      arg4: *mut size_t)
                                                     -> c_int>,
    pub read_handler_data: *mut c_void,
    pub input: yaml_parser_input_u,
    pub eof: c_int,
    pub buffer: yaml_parser_buffer_s,
    pub unread: size_t,
    pub raw_buffer: yaml_parser_raw_buffer_s,
    pub encoding: yaml_encoding_t,
    pub offset: size_t,
    pub mark: yaml_mark_t,
    pub stream_start_produced: c_int,
    pub stream_end_produced: c_int,
    pub flow_level: c_int,
    pub tokens: yaml_parser_tokens_s,
    pub tokens_parsed: size_t,
    pub token_available: c_int,
    pub indents: yaml_parser_indents_s,
    pub indent: c_int,
    pub simple_key_allowed: c_int,
    pub simple_keys: yaml_parser_simple_keys_s,
    pub states: yaml_parser_states_s,
    pub state: yaml_parser_state_t,
    pub marks: yaml_parser_marks_s,
    pub tag_directives: yaml_parser_tag_directives_s,
    pub aliases: yaml_parser_aliases_s,
    pub document: *mut yaml_document_t,
}
pub struct yaml_parser_input_u {
    pub data: [u64, ..3u],
}
impl yaml_parser_input_u {
    pub fn string(&mut self) -> *mut yaml_parser_input_string_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn file(&mut self) -> *mut *mut FILE {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct yaml_parser_input_string_s {
    pub start: *c_uchar,
    pub end: *c_uchar,
    pub current: *c_uchar,
}
pub struct yaml_parser_buffer_s {
    pub start: *mut yaml_char_t,
    pub end: *mut yaml_char_t,
    pub pointer: *mut yaml_char_t,
    pub last: *mut yaml_char_t,
}
pub struct yaml_parser_raw_buffer_s {
    pub start: *mut c_uchar,
    pub end: *mut c_uchar,
    pub pointer: *mut c_uchar,
    pub last: *mut c_uchar,
}
pub struct yaml_parser_tokens_s {
    pub start: *mut yaml_token_t,
    pub end: *mut yaml_token_t,
    pub head: *mut yaml_token_t,
    pub tail: *mut yaml_token_t,
}
pub struct yaml_parser_indents_s {
    pub start: *mut c_int,
    pub end: *mut c_int,
    pub top: *mut c_int,
}
pub struct yaml_parser_simple_keys_s {
    pub start: *mut yaml_simple_key_t,
    pub end: *mut yaml_simple_key_t,
    pub top: *mut yaml_simple_key_t,
}
pub struct yaml_parser_states_s {
    pub start: *mut yaml_parser_state_t,
    pub end: *mut yaml_parser_state_t,
    pub top: *mut yaml_parser_state_t,
}
pub struct yaml_parser_marks_s {
    pub start: *mut yaml_mark_t,
    pub end: *mut yaml_mark_t,
    pub top: *mut yaml_mark_t,
}
pub struct yaml_parser_tag_directives_s {
    pub start: *mut yaml_tag_directive_t,
    pub end: *mut yaml_tag_directive_t,
    pub top: *mut yaml_tag_directive_t,
}
pub struct yaml_parser_aliases_s {
    pub start: *mut yaml_alias_data_t,
    pub end: *mut yaml_alias_data_t,
    pub top: *mut yaml_alias_data_t,
}
pub type yaml_parser_t = yaml_parser_s;
pub type yaml_write_handler_t = c_void;

pub type yaml_emitter_state_e = c_uint;
pub static YAML_EMIT_STREAM_START_STATE: c_uint = 0;
pub static YAML_EMIT_FIRST_DOCUMENT_START_STATE: c_uint = 1;
pub static YAML_EMIT_DOCUMENT_START_STATE: c_uint = 2;
pub static YAML_EMIT_DOCUMENT_CONTENT_STATE: c_uint = 3;
pub static YAML_EMIT_DOCUMENT_END_STATE: c_uint = 4;
pub static YAML_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE: c_uint = 5;
pub static YAML_EMIT_FLOW_SEQUENCE_ITEM_STATE: c_uint = 6;
pub static YAML_EMIT_FLOW_MAPPING_FIRST_KEY_STATE: c_uint = 7;
pub static YAML_EMIT_FLOW_MAPPING_KEY_STATE: c_uint = 8;
pub static YAML_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE: c_uint = 9;
pub static YAML_EMIT_FLOW_MAPPING_VALUE_STATE: c_uint = 10;
pub static YAML_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE: c_uint = 11;
pub static YAML_EMIT_BLOCK_SEQUENCE_ITEM_STATE: c_uint = 12;
pub static YAML_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE: c_uint = 13;
pub static YAML_EMIT_BLOCK_MAPPING_KEY_STATE: c_uint = 14;
pub static YAML_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE: c_uint = 15;
pub static YAML_EMIT_BLOCK_MAPPING_VALUE_STATE: c_uint = 16;
pub static YAML_EMIT_END_STATE: c_uint = 17;
pub type yaml_emitter_state_t = yaml_emitter_state_e;
pub struct yaml_emitter_s {
    pub error: yaml_error_type_t,
    pub problem: *c_char,
    pub write_handler: *mut ::std::option::Option<extern "C" fn
                                                      (arg1: *mut c_void,
                                                       arg2: *mut c_uchar,
                                                       arg3: size_t)
                                                      -> c_int>,
    pub write_handler_data: *mut c_void,
    pub output: yaml_emitter_output_u,
    pub buffer: yaml_emitter_buffer_s,
    pub raw_buffer: yaml_emitter_raw_buffer_s,
    pub encoding: yaml_encoding_t,
    pub canonical: c_int,
    pub best_indent: c_int,
    pub best_width: c_int,
    pub unicode: c_int,
    pub line_break: yaml_break_t,
    pub states: yaml_emitter_states_s,
    pub state: yaml_emitter_state_t,
    pub events: yaml_emitter_events_s,
    pub indents: yaml_emitter_indents_s,
    pub tag_directives: yaml_emitter_tag_directives_s,
    pub indent: c_int,
    pub flow_level: c_int,
    pub root_context: c_int,
    pub sequence_context: c_int,
    pub mapping_context: c_int,
    pub simple_key_context: c_int,
    pub line: c_int,
    pub column: c_int,
    pub whitespace: c_int,
    pub indention: c_int,
    pub open_ended: c_int,
    pub anchor_data: yaml_emitter_anchor_data_s,
    pub tag_data: yaml_emitter_tag_data_s,
    pub scalar_data: yaml_emitter_scalar_data_s,
    pub opened: c_int,
    pub closed: c_int,
    pub anchors: *mut yaml_emitter_anchors_s,
    pub last_anchor_id: c_int,
    pub document: *mut yaml_document_t,
}
pub struct yaml_emitter_output_u {
    pub data: [u64, ..3u],
}
impl yaml_emitter_output_u {
    pub fn string(&mut self) -> *mut yaml_emitter_output_string_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn file(&mut self) -> *mut *mut FILE {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct yaml_emitter_output_string_s {
    pub buffer: *mut c_uchar,
    pub size: size_t,
    pub size_written: *mut size_t,
}
pub struct yaml_emitter_buffer_s {
    pub start: *mut yaml_char_t,
    pub end: *mut yaml_char_t,
    pub pointer: *mut yaml_char_t,
    pub last: *mut yaml_char_t,
}
pub struct yaml_emitter_raw_buffer_s {
    pub start: *mut c_uchar,
    pub end: *mut c_uchar,
    pub pointer: *mut c_uchar,
    pub last: *mut c_uchar,
}
pub struct yaml_emitter_states_s {
    pub start: *mut yaml_emitter_state_t,
    pub end: *mut yaml_emitter_state_t,
    pub top: *mut yaml_emitter_state_t,
}
pub struct yaml_emitter_events_s {
    pub start: *mut yaml_event_t,
    pub end: *mut yaml_event_t,
    pub head: *mut yaml_event_t,
    pub tail: *mut yaml_event_t,
}
pub struct yaml_emitter_indents_s {
    pub start: *mut c_int,
    pub end: *mut c_int,
    pub top: *mut c_int,
}
pub struct yaml_emitter_tag_directives_s {
    pub start: *mut yaml_tag_directive_t,
    pub end: *mut yaml_tag_directive_t,
    pub top: *mut yaml_tag_directive_t,
}
pub struct yaml_emitter_anchor_data_s {
    pub anchor: *mut yaml_char_t,
    pub anchor_length: size_t,
    pub alias: c_int,
}
pub struct yaml_emitter_tag_data_s {
    pub handle: *mut yaml_char_t,
    pub handle_length: size_t,
    pub suffix: *mut yaml_char_t,
    pub suffix_length: size_t,
}
pub struct yaml_emitter_scalar_data_s {
    pub value: *mut yaml_char_t,
    pub length: size_t,
    pub multiline: c_int,
    pub flow_plain_allowed: c_int,
    pub block_plain_allowed: c_int,
    pub single_quoted_allowed: c_int,
    pub block_allowed: c_int,
    pub style: yaml_scalar_style_t,
}
pub struct yaml_emitter_anchors_s {
    pub references: c_int,
    pub anchor: c_int,
    pub serialized: c_int,
}
pub type yaml_emitter_t = yaml_emitter_s;
#[link(name = "yaml")]
extern "C" {
    pub fn yaml_get_version_string() -> *c_char;
    pub fn yaml_get_version(major: *mut c_int, minor: *mut c_int,
                            patch: *mut c_int);
    pub fn yaml_token_delete(token: *mut yaml_token_t);
    pub fn yaml_stream_start_event_initialize(event: *mut yaml_event_t,
                                              encoding: yaml_encoding_t) ->
     c_int;
    pub fn yaml_stream_end_event_initialize(event: *mut yaml_event_t) ->
     c_int;
    pub fn yaml_document_start_event_initialize(event: *mut yaml_event_t,
                                                version_directive:
                                                    *mut yaml_version_directive_t,
                                                tag_directives_start:
                                                    *mut yaml_tag_directive_t,
                                                tag_directives_end:
                                                    *mut yaml_tag_directive_t,
                                                implicit: c_int) -> c_int;
    pub fn yaml_document_end_event_initialize(event: *mut yaml_event_t,
                                              implicit: c_int) -> c_int;
    pub fn yaml_alias_event_initialize(event: *mut yaml_event_t,
                                       anchor: *mut yaml_char_t) -> c_int;
    pub fn yaml_scalar_event_initialize(event: *mut yaml_event_t,
                                        anchor: *mut yaml_char_t,
                                        tag: *mut yaml_char_t,
                                        value: *mut yaml_char_t,
                                        length: c_int, plain_implicit: c_int,
                                        quoted_implicit: c_int,
                                        style: yaml_scalar_style_t) -> c_int;
    pub fn yaml_sequence_start_event_initialize(event: *mut yaml_event_t,
                                                anchor: *mut yaml_char_t,
                                                tag: *mut yaml_char_t,
                                                implicit: c_int,
                                                style: yaml_sequence_style_t)
     -> c_int;
    pub fn yaml_sequence_end_event_initialize(event: *mut yaml_event_t) ->
     c_int;
    pub fn yaml_mapping_start_event_initialize(event: *mut yaml_event_t,
                                               anchor: *mut yaml_char_t,
                                               tag: *mut yaml_char_t,
                                               implicit: c_int,
                                               style: yaml_mapping_style_t) ->
     c_int;
    pub fn yaml_mapping_end_event_initialize(event: *mut yaml_event_t) ->
     c_int;
    pub fn yaml_event_delete(event: *mut yaml_event_t);
    pub fn yaml_document_initialize(document: *mut yaml_document_t,
                                    version_directive:
                                        *mut yaml_version_directive_t,
                                    tag_directives_start:
                                        *mut yaml_tag_directive_t,
                                    tag_directives_end:
                                        *mut yaml_tag_directive_t,
                                    start_implicit: c_int,
                                    end_implicit: c_int) -> c_int;
    pub fn yaml_document_delete(document: *mut yaml_document_t);
    pub fn yaml_document_get_node(document: *yaml_document_t,
                                  index: c_int) -> *mut yaml_node_t;
    pub fn yaml_document_get_root_node(document: *mut yaml_document_t) ->
     *mut yaml_node_t;
    pub fn yaml_document_add_scalar(document: *mut yaml_document_t,
                                    tag: *mut yaml_char_t,
                                    value: *mut yaml_char_t, length: c_int,
                                    style: yaml_scalar_style_t) -> c_int;
    pub fn yaml_document_add_sequence(document: *mut yaml_document_t,
                                      tag: *mut yaml_char_t,
                                      style: yaml_sequence_style_t) -> c_int;
    pub fn yaml_document_add_mapping(document: *mut yaml_document_t,
                                     tag: *mut yaml_char_t,
                                     style: yaml_mapping_style_t) -> c_int;
    pub fn yaml_document_append_sequence_item(document: *mut yaml_document_t,
                                              sequence: c_int, item: c_int) ->
     c_int;
    pub fn yaml_document_append_mapping_pair(document: *mut yaml_document_t,
                                             mapping: c_int, key: c_int,
                                             value: c_int) -> c_int;
    pub fn yaml_parser_initialize(parser: *mut yaml_parser_t) -> c_int;
    pub fn yaml_parser_delete(parser: *mut yaml_parser_t);
    pub fn yaml_parser_set_input_string(parser: *mut yaml_parser_t,
                                        input: *c_uchar, size: size_t);
    pub fn yaml_parser_set_input_file(parser: *mut yaml_parser_t,
                                      file: *mut FILE);
    pub fn yaml_parser_set_input(parser: *mut yaml_parser_t,
                                 handler:
                                     *mut extern "C" fn
                                                                    (arg1:
                                                                         *mut c_void,
                                                                     arg2:
                                                                         *mut c_uchar,
                                                                     arg3:
                                                                         size_t,
                                                                     arg4:
                                                                         *mut size_t)
                                                                    -> c_int,
                                 data: *mut c_void);
    pub fn yaml_parser_set_encoding(parser: *mut yaml_parser_t,
                                    encoding: yaml_encoding_t);
    pub fn yaml_parser_scan(parser: *mut yaml_parser_t,
                            token: *mut yaml_token_t) -> c_int;
    pub fn yaml_parser_parse(parser: *mut yaml_parser_t,
                             event: *mut yaml_event_t) -> c_int;
    pub fn yaml_parser_load(parser: *mut yaml_parser_t,
                            document: *mut yaml_document_t) -> c_int;
    pub fn yaml_emitter_initialize(emitter: *mut yaml_emitter_t) -> c_int;
    pub fn yaml_emitter_delete(emitter: *mut yaml_emitter_t);
    pub fn yaml_emitter_set_output_string(emitter: *mut yaml_emitter_t,
                                          output: *mut c_uchar, size: size_t,
                                          size_written: *mut size_t);
    pub fn yaml_emitter_set_output_file(emitter: *mut yaml_emitter_t,
                                        file: *mut FILE);
    pub fn yaml_emitter_set_output(emitter: *mut yaml_emitter_t,
                                   handler:
                                       *mut extern "C" fn
                                                                      (arg1:
                                                                           *mut c_void,
                                                                       arg2:
                                                                           *mut c_uchar,
                                                                       arg3:
                                                                           size_t)
                                                                      ->
                                                                          c_int,
                                   data: *mut c_void);
    pub fn yaml_emitter_set_encoding(emitter: *mut yaml_emitter_t,
                                     encoding: yaml_encoding_t);
    pub fn yaml_emitter_set_canonical(emitter: *mut yaml_emitter_t,
                                      canonical: c_int);
    pub fn yaml_emitter_set_indent(emitter: *mut yaml_emitter_t,
                                   indent: c_int);
    pub fn yaml_emitter_set_width(emitter: *mut yaml_emitter_t, width: c_int);
    pub fn yaml_emitter_set_unicode(emitter: *mut yaml_emitter_t,
                                    unicode: c_int);
    pub fn yaml_emitter_set_break(emitter: *mut yaml_emitter_t,
                                  line_break: yaml_break_t);
    pub fn yaml_emitter_emit(emitter: *mut yaml_emitter_t,
                             event: *mut yaml_event_t) -> c_int;
    pub fn yaml_emitter_open(emitter: *mut yaml_emitter_t) -> c_int;
    pub fn yaml_emitter_close(emitter: *mut yaml_emitter_t) -> c_int;
    pub fn yaml_emitter_dump(emitter: *mut yaml_emitter_t,
                             document: *mut yaml_document_t) -> c_int;
    pub fn yaml_emitter_flush(emitter: *mut yaml_emitter_t) -> c_int;
}
